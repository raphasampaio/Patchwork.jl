var documenterSearchIndex = {"docs":
[{"location":"plugins/highcharts/#Highcharts","page":"Highcharts","title":"Highcharts","text":"","category":"section"},{"location":"plugins/highcharts/#Patchwork.HighchartsPlugin.Highcharts","page":"Highcharts","title":"Patchwork.HighchartsPlugin.Highcharts","text":"Highcharts(title::String, config::Dict{String,Any})\nHighcharts(title::String, config::AbstractString)\n\nHighcharts visualization plugin.\n\nCreates interactive charts using the Highcharts library. Supports the full Highcharts configuration API. Accepts configuration as either a dictionary or JSON string.\n\nFields\n\ntitle::String: Chart title displayed above the visualization\nconfig::Dict{String,Any}: Highcharts configuration object\n\nConstructors\n\nHighcharts(title::String, config::Dict{String,Any}) - From dictionary\nHighcharts(title::String, config::AbstractString) - From JSON string\n\nExample: Line Chart\n\nPatchwork.Highcharts(\n    \"Monthly Performance\",\n    Dict{String,Any}(\n        \"chart\" => Dict(\"type\" => \"line\"),\n        \"xAxis\" => Dict(\"categories\" => [\"Jan\", \"Feb\", \"Mar\"]),\n        \"yAxis\" => Dict(\"title\" => Dict(\"text\" => \"Value\")),\n        \"series\" => [\n            Dict(\"name\" => \"Series A\", \"data\" => [29, 71, 106]),\n            Dict(\"name\" => \"Series B\", \"data\" => [50, 80, 95]),\n        ],\n    ),\n)\n\nExample: Column Chart\n\nPatchwork.Highcharts(\n    \"Distribution\",\n    Dict{String,Any}(\n        \"chart\" => Dict(\"type\" => \"column\"),\n        \"xAxis\" => Dict(\"categories\" => [\"Alpha\", \"Beta\", \"Gamma\"]),\n        \"series\" => [Dict(\"name\" => \"Values\", \"data\" => [5, 3, 4])],\n    ),\n)\n\nExample: From JSON\n\nconfig_json = \"\"\"\n{\n    \"chart\": {\"type\": \"area\"},\n    \"series\": [{\"data\": [1, 2, 3, 4]}]\n}\n\"\"\"\nPatchwork.Highcharts(\"Area Chart\", config_json)\n\nSee also: ChartJs, Plotly, Plugin\n\n\n\n\n\n","category":"type"},{"location":"dashboard/#Dashboard","page":"Dashboard","title":"Dashboard","text":"","category":"section"},{"location":"dashboard/#Patchwork.Dashboard","page":"Dashboard","title":"Patchwork.Dashboard","text":"Dashboard(title::String, tabs::Vector{Tab}; custom_css::String = \"\")\n\nMain dashboard type containing all content to be rendered.\n\nA dashboard generates a self-contained HTML file with Vue.js reactivity, Tailwind CSS styling, and a responsive tabbed interface. It automatically collects and includes all necessary dependencies from the plugins used.\n\nFields\n\ntitle::String: Dashboard title displayed in the header and browser tab\ntabs::Vector{Tab}: Vector of tabs to display in the sidebar\ncustom_css::String: Optional custom CSS styles to apply globally\n\nExample\n\ndashboard = Patchwork.Dashboard(\n    \"Analytics Dashboard\",\n    [\n        Patchwork.Tab(\"Overview\", [...]),\n        Patchwork.Tab(\"Details\", [...]),\n    ],\n    custom_css = \"\"\"\n    .custom-header {\n        background: linear-gradient(to right, #667eea, #764ba2);\n    }\n    \"\"\"\n)\n\nSee also: Tab, save, generate_html\n\n\n\n\n\n","category":"type"},{"location":"dashboard/#Patchwork.generate_html-Tuple{Patchwork.Dashboard}","page":"Dashboard","title":"Patchwork.generate_html","text":"generate_html(dashboard::Dashboard) -> String\n\nGenerate complete HTML string for dashboard.\n\nThis function generates a self-contained HTML document from the dashboard. It collects all unique plugin types, gathers their dependencies, and creates a Vue.js-powered single-page application with reactive tab switching and search functionality.\n\nThe generation process:\n\nCollects unique plugin types from all tabs\nGathers CSS dependencies (CDN URLs) from plugin types\nGathers JavaScript dependencies (CDN URLs) from plugin types\nGathers initialization scripts from plugin types\nGathers custom CSS from plugin types\nGenerates unique IDs for each plugin instance\nConverts plugins to HTML using to_html\nEmbeds all data as JSON in Vue.js application\nCreates responsive UI with sidebar, search, and mobile support\n\nArguments\n\ndashboard::Dashboard: Dashboard to generate HTML for\n\nReturns\n\nString: Complete HTML document as a string\n\nExample\n\ndashboard = Patchwork.Dashboard(\"Title\", tabs)\nhtml = generate_html(dashboard)\nwrite(\"output.html\", html)\n\nSee also: Dashboard, save\n\n\n\n\n\n","category":"method"},{"location":"dashboard/#Patchwork.save-Tuple{Patchwork.Dashboard, String}","page":"Dashboard","title":"Patchwork.save","text":"save(dashboard::Dashboard, path::String) -> String\n\nGenerate complete HTML and save to file.\n\nThis function generates a self-contained HTML file from the dashboard and writes it to the specified path. The generated file includes all necessary CSS and JavaScript dependencies, plugin content, and initialization code.\n\nArguments\n\ndashboard::Dashboard: Dashboard to save\npath::String: Output file path (absolute or relative)\n\nReturns\n\nString: Path to the saved file\n\nExample\n\ndashboard = Patchwork.Dashboard(\"Title\", tabs)\nsave(dashboard, \"output.html\")\nsave(dashboard, \"/path/to/dashboard.html\")\n\nSee also: Dashboard, generate_html\n\n\n\n\n\n","category":"method"},{"location":"plugins/markdown/#Markdown","page":"Markdown","title":"Markdown","text":"","category":"section"},{"location":"plugins/markdown/#Patchwork.MarkdownPlugin.Markdown","page":"Markdown","title":"Patchwork.MarkdownPlugin.Markdown","text":"Markdown(content::String)\n\nMarkdown content plugin with syntax highlighting.\n\nThis plugin renders markdown content using Julia's built-in Markdown parser and includes Highlight.js for syntax highlighting of code blocks. Supports all standard markdown features including headers, lists, links, images, code blocks, and more.\n\nFields\n\ncontent::String: Markdown content to render\n\nExample\n\nPatchwork.Markdown(\"\"\"\n# Title\n\n**Bold text** and *italic text*\n\n- List item 1\n- List item 2\n\n\njulia println(\"Code with syntax highlighting\")\n\n\"\"\")\n\nExample: Documentation\n\nPatchwork.Markdown(\"\"\"\n## API Reference\n\n### Functions\n\n- `save(dashboard, path)` - Save dashboard to HTML file\n- `generate_html(dashboard)` - Generate HTML string\n\nSee the [documentation](https://example.com) for details.\n\"\"\")\n\nSee also: Plugin, HTML\n\n\n\n\n\n","category":"type"},{"location":"plugins/mermaid/#Mermaid","page":"Mermaid","title":"Mermaid","text":"","category":"section"},{"location":"plugins/mermaid/#Patchwork.MermaidPlugin.Mermaid","page":"Mermaid","title":"Patchwork.MermaidPlugin.Mermaid","text":"Mermaid(\n    title::String,\n    diagram::String;\n    theme::String = \"default\"\n)\n\nDiagram and flowchart plugin using Mermaid.\n\nCreates diagrams from text using Mermaid syntax. Supports flowcharts, sequence diagrams, class diagrams, state diagrams, ER diagrams, Gantt charts, and more.\n\nFields\n\ntitle::String: Diagram title displayed above the visualization\ndiagram::String: Mermaid diagram syntax\ntheme::String: Diagram theme (default: \"default\")\n\nExample: Flowchart\n\nPatchwork.Mermaid(\n    \"System Architecture\",\n    \"\"\"\n    graph TD\n        A[Client] --> B[Load Balancer]\n        B --> C[Server 1]\n        B --> D[Server 2]\n    \"\"\",\n)\n\nExample: Sequence Diagram\n\nPatchwork.Mermaid(\n    \"Authentication Flow\",\n    \"\"\"\n    sequenceDiagram\n        participant U as User\n        participant A as App\n        participant S as Server\n        U->>A: Login\n        A->>S: Authenticate\n        S-->>A: Token\n        A-->>U: Success\n    \"\"\",\n)\n\nExample: Class Diagram\n\nPatchwork.Mermaid(\n    \"Data Model\",\n    \"\"\"\n    classDiagram\n        class User {\n            +String name\n            +String email\n            +login()\n        }\n        class Order {\n            +Date created\n            +process()\n        }\n        User \"1\" --> \"*\" Order\n    \"\"\",\n)\n\nExample: Gantt Chart\n\nPatchwork.Mermaid(\n    \"Project Timeline\",\n    \"\"\"\n    gantt\n        title Project Schedule\n        dateFormat YYYY-MM-DD\n        section Phase 1\n        Design    :a1, 2024-01-01, 30d\n        Development :after a1, 45d\n    \"\"\",\n)\n\nSupported Diagram Types\n\nFlowcharts (graph or flowchart)\nSequence diagrams (sequenceDiagram)\nClass diagrams (classDiagram)\nState diagrams (stateDiagram)\nER diagrams (erDiagram)\nGantt charts (gantt)\nPie charts (pie)\nGit graphs (gitGraph)\n\nSee also: Plugin\n\n\n\n\n\n","category":"type"},{"location":"plugins/datatables/#DataTables","page":"DataTables","title":"DataTables","text":"","category":"section"},{"location":"plugins/datatables/#Patchwork.DataTablesPlugin.DataTables","page":"DataTables","title":"Patchwork.DataTablesPlugin.DataTables","text":"DataTables(title::String, data::Vector{Vector{Any}}, columns::Vector{String})\n\nInteractive table with sorting, searching, and pagination using DataTables.\n\nFields\n\ntitle::String: Table title\ndata::Vector{Vector{Any}}: Table data as rows\ncolumns::Vector{String}: Column headers\n\nExamples\n\nusing Patchwork\n\ntable = Patchwork.DataTables(\n    \"Sales Data\",\n    [\n        [\"Q1\", 100, 150],\n        [\"Q2\", 120, 160],\n        [\"Q3\", 140, 180],\n        [\"Q4\", 130, 170],\n    ],\n    [\"Period\", \"Product A\", \"Product B\"],\n)\n\ndashboard = Patchwork.Dashboard(\"Dashboard\", [Patchwork.Tab(\"Data\", [table])])\nsave(dashboard, \"output.html\")\n\n\n\n\n\n","category":"type"},{"location":"plugins/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"plugins/","page":"Overview","title":"Overview","text":"Patchwork includes eight built-in plugins for common dashboard components. Each plugin is designed to work seamlessly with the dashboard system and requires no additional configuration. The built-in plugins are:","category":"page"},{"location":"plugins/","page":"Overview","title":"Overview","text":"HTML - Raw HTML content\nMarkdown - Markdown rendering\nChartJs - Chart.js charts\nHighcharts - Highcharts charts\nPlotly - Plotly charts and maps\nLeaflet - Leaflet maps\nMermaid - Mermaid diagrams\nDataTables - Interactive tables","category":"page"},{"location":"plugins/#Creating-Custom-Plugins","page":"Overview","title":"Creating Custom Plugins","text":"","category":"section"},{"location":"plugins/","page":"Overview","title":"Overview","text":"Extend Patchwork with any JavaScript library by creating custom plugins.","category":"page"},{"location":"plugins/#Plugin-Interface","page":"Overview","title":"Plugin Interface","text":"","category":"section"},{"location":"plugins/","page":"Overview","title":"Overview","text":"All plugins must implement to_html. Optional functions include css_deps, js_deps, init_script, and css.","category":"page"},{"location":"plugins/","page":"Overview","title":"Overview","text":"module MyPluginModule\n\nimport ..Plugin, ..to_html, ..css_deps, ..js_deps, ..init_script, ..css\nexport MyPlugin\n\nstruct MyPlugin <: Plugin\n    content::String\nend\n\n# Required\nto_html(plugin::MyPlugin) = \"<div class='myplugin'>$(plugin.content)</div>\"\n\n# Optional\ncss_deps(::Type{MyPlugin}) = [\"https://cdn.example.com/lib.css\"]\njs_deps(::Type{MyPlugin}) = [\"https://cdn.example.com/lib.js\"]\ninit_script(::Type{MyPlugin}) = \"// initialization code\"\ncss(::Type{MyPlugin}) = \".myplugin { padding: 1rem; }\"\n\nend","category":"page"},{"location":"plugins/#Best-Practices","page":"Overview","title":"Best Practices","text":"","category":"section"},{"location":"plugins/","page":"Overview","title":"Overview","text":"Use unique CSS classes to avoid conflicts\nGenerate unique IDs with UUIDs for elements\nStore data in attributes using data-* attributes\nQuery by class in init_script to initialize all instances\nHandle visibility for libraries that need visible elements\nUse different module/struct names to avoid conflicts\nAdd error handling in JavaScript initialization","category":"page"},{"location":"plugins/#API-Reference","page":"Overview","title":"API Reference","text":"","category":"section"},{"location":"plugins/#Patchwork.Plugin","page":"Overview","title":"Patchwork.Plugin","text":"Plugin\n\nAbstract base type for all Patchwork plugins.\n\nAll plugin types must subtype Plugin and implement the to_html function. Optionally, plugins can implement css_deps, js_deps, init_script, and css functions to provide external dependencies and initialization code.\n\nExample\n\nstruct MyPlugin <: Plugin\n    content::String\nend\n\nto_html(plugin::MyPlugin) = \"<div>$(plugin.content)</div>\"\n\nSee also: to_html, css_deps, js_deps, init_script, css\n\n\n\n\n\n","category":"type"},{"location":"plugins/#Patchwork.css-Tuple{Type{<:Patchwork.Plugin}}","page":"Overview","title":"Patchwork.css","text":"css(::Type{<:Plugin}) -> String\n\nReturn custom CSS styles for a plugin type.\n\nArguments\n\n::Type{<:Plugin}: Plugin type (not instance)\n\nReturns\n\nString: CSS styles\n\nDefault\n\nReturns \"\" if not implemented.\n\nExample\n\ncss(::Type{MyPlugin}) = \"\"\"\n    .my-plugin {\n        padding: 1rem;\n        border: 1px solid #ccc;\n    }\n\"\"\"\n\nSee also: css_deps, to_html\n\n\n\n\n\n","category":"method"},{"location":"plugins/#Patchwork.css_deps-Tuple{Type{<:Patchwork.Plugin}}","page":"Overview","title":"Patchwork.css_deps","text":"css_deps(::Type{<:Plugin}) -> Vector{String}\n\nReturn vector of CSS dependency URLs for a plugin type.\n\nArguments\n\n::Type{<:Plugin}: Plugin type (not instance)\n\nReturns\n\nVector{String}: CDN URLs for CSS dependencies\n\nDefault\n\nReturns String[] if not implemented.\n\nExample\n\ncss_deps(::Type{MyPlugin}) = [\"https://cdn.example.com/style.css\"]\n\nSee also: js_deps, to_html\n\n\n\n\n\n","category":"method"},{"location":"plugins/#Patchwork.init_script-Tuple{Type{<:Patchwork.Plugin}}","page":"Overview","title":"Patchwork.init_script","text":"init_script(::Type{<:Plugin}) -> String\n\nReturn JavaScript initialization code for a plugin type.\n\nThis code runs after all dependencies are loaded and the DOM is ready. Typically used to initialize JavaScript libraries on plugin elements.\n\nArguments\n\n::Type{<:Plugin}: Plugin type (not instance)\n\nReturns\n\nString: JavaScript initialization code\n\nDefault\n\nReturns \"\" if not implemented.\n\nExample\n\ninit_script(::Type{MyPlugin}) = \"\"\"\n    document.querySelectorAll('.my-plugin').forEach(el => {\n        // Initialize library\n    });\n\"\"\"\n\nSee also: js_deps, to_html\n\n\n\n\n\n","category":"method"},{"location":"plugins/#Patchwork.js_deps-Tuple{Type{<:Patchwork.Plugin}}","page":"Overview","title":"Patchwork.js_deps","text":"js_deps(::Type{<:Plugin}) -> Vector{String}\n\nReturn vector of JavaScript dependency URLs for a plugin type.\n\nArguments\n\n::Type{<:Plugin}: Plugin type (not instance)\n\nReturns\n\nVector{String}: CDN URLs for JavaScript dependencies\n\nDefault\n\nReturns String[] if not implemented.\n\nExample\n\njs_deps(::Type{MyPlugin}) = [\"https://cdn.example.com/lib.js\"]\n\nSee also: css_deps, init_script\n\n\n\n\n\n","category":"method"},{"location":"plugins/#Patchwork.to_html","page":"Overview","title":"Patchwork.to_html","text":"to_html(plugin::Plugin) -> String\n\nConvert plugin to HTML string. Must be implemented for all custom plugins.\n\nArguments\n\nplugin::Plugin: Plugin instance to convert\n\nReturns\n\nString: HTML representation of the plugin\n\nExample\n\nto_html(plugin::MyPlugin) = \"<div class='my-plugin'>$(plugin.content)</div>\"\n\nSee also: Plugin, css_deps, js_deps\n\n\n\n\n\n","category":"function"},{"location":"plugins/#Patchwork.get_plugin_type-Tuple{Patchwork.Plugin}","page":"Overview","title":"Patchwork.get_plugin_type","text":"get_plugin_type(plugin::Plugin) -> String\n\nGet the lowercase type name of a plugin.\n\nThis function extracts the plugin type name from the fully qualified type name and converts it to lowercase. Used internally for HTML class generation and plugin identification.\n\nArguments\n\nplugin::Plugin: Plugin instance\n\nReturns\n\nString: Lowercase plugin type name\n\nExample\n\nplugin = Patchwork.ChartJs(\"Title\", \"bar\", Dict{String,Any}(...))\nget_plugin_type(plugin)  # Returns \"chartjs\"\n\n\n\n\n\n","category":"method"},{"location":"tab/#Tab","page":"Tab","title":"Tab","text":"","category":"section"},{"location":"tab/#Patchwork.Tab","page":"Tab","title":"Patchwork.Tab","text":"Tab(label::String, plugins::Vector{Plugin})\n\nRepresents a tab in a Patchwork dashboard.\n\nA tab contains a label that appears in the dashboard sidebar and a vector of plugins that are displayed when the tab is selected.\n\nFields\n\nlabel::String: Tab label displayed in the sidebar navigation\nplugins::Vector{Plugin}: Vector of plugins to render in the tab\n\nExample\n\ntab = Patchwork.Tab(\n    \"Overview\",\n    [\n        Patchwork.Markdown(\"# Welcome\"),\n        Patchwork.ChartJs(\"Sales\", \"bar\", Dict{String,Any}(...)),\n    ]\n)\n\nSee also: Dashboard, Plugin\n\n\n\n\n\n","category":"type"},{"location":"plugins/plotly/#Plotly","page":"Plotly","title":"Plotly","text":"","category":"section"},{"location":"plugins/plotly/#Patchwork.PlotlyPlugin.Plotly","page":"Plotly","title":"Patchwork.PlotlyPlugin.Plotly","text":"Plotly(\n    title::String,\n    data::Vector{Dict{String,Any}};\n    layout::Dict{String,Any} = Dict{String,Any}(),\n    config::Dict{String,Any} = Dict{String,Any}()\n)\n\nPlotly visualization plugin.\n\nCreates interactive charts and visualizations using Plotly.js. Supports 2D/3D plots, scientific charts, maps, and statistical visualizations. Provides full access to Plotly's data, layout, and config options.\n\nFields\n\ntitle::String: Chart title displayed above the visualization\ndata::Vector{Dict{String,Any}}: Vector of Plotly data traces\nlayout::Dict{String,Any}: Layout configuration (axes, title, etc.)\nconfig::Dict{String,Any}: Plotly config options (responsive, displayModeBar, etc.)\n\nExample: Scatter Plot\n\nPatchwork.Plotly(\n    \"Scatter Analysis\",\n    [\n        Dict{String,Any}(\n            \"x\" => [1, 2, 3, 4, 5],\n            \"y\" => [1, 4, 9, 16, 25],\n            \"mode\" => \"markers+lines\",\n            \"type\" => \"scatter\",\n            \"name\" => \"Quadratic\",\n        ),\n    ],\n    layout = Dict{String,Any}(\n        \"xaxis\" => Dict(\"title\" => \"X\"),\n        \"yaxis\" => Dict(\"title\" => \"Y²\"),\n    ),\n)\n\nExample: 3D Surface\n\nPatchwork.Plotly(\n    \"3D Surface\",\n    [\n        Dict{String,Any}(\n            \"z\" => [[1, 2, 3], [2, 3, 4], [3, 4, 5]],\n            \"type\" => \"surface\",\n        ),\n    ],\n    layout = Dict{String,Any}(\"title\" => \"Surface Plot\"),\n)\n\nExample: Scattermap\n\nPatchwork.Plotly(\n    \"US Cities\",\n    [\n        Dict{String,Any}(\n            \"type\" => \"scattermapbox\",\n            \"lat\" => [40.7128, 34.0522],\n            \"lon\" => [-74.0060, -118.2437],\n            \"mode\" => \"markers\",\n            \"text\" => [\"NYC\", \"LA\"],\n        ),\n    ],\n    layout = Dict{String,Any}(\n        \"mapbox\" => Dict(\n            \"style\" => \"open-street-map\",\n            \"center\" => Dict(\"lat\" => 37, \"lon\" => -95),\n            \"zoom\" => 3,\n        ),\n    ),\n)\n\nSee also: ChartJs, Highcharts, Leaflet, Plugin\n\n\n\n\n\n","category":"type"},{"location":"plugins/html/#HTML","page":"HTML","title":"HTML","text":"","category":"section"},{"location":"plugins/html/#Patchwork.HTMLPlugin.HTML","page":"HTML","title":"Patchwork.HTMLPlugin.HTML","text":"HTML(content::String)\n\nRaw HTML content plugin.\n\nThis plugin allows you to include arbitrary HTML content in your dashboard. The content is passed through without modification, allowing you to use custom HTML, CSS classes (including Tailwind CSS utilities), and even inline JavaScript if needed.\n\nFields\n\ncontent::String: Raw HTML string to include in the dashboard\n\nExample\n\nPatchwork.HTML(\"\"\"\n<div class=\"p-6 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg shadow-xl\">\n    <h2 class=\"text-2xl font-bold text-white mb-2\">Custom Component</h2>\n    <p class=\"text-blue-100\">Styled with Tailwind CSS</p>\n</div>\n\"\"\")\n\nExample: Alert Box\n\nPatchwork.HTML(\"\"\"\n<div class=\"bg-yellow-50 border-l-4 border-yellow-400 p-4\">\n    <p class=\"text-sm text-yellow-700\">\n        <strong>Warning:</strong> This action cannot be undone.\n    </p>\n</div>\n\"\"\")\n\nSee also: Plugin, to_html\n\n\n\n\n\n","category":"type"},{"location":"plugins/chartjs/#ChartJs","page":"ChartJs","title":"ChartJs","text":"","category":"section"},{"location":"plugins/chartjs/#Patchwork.ChartJsPlugin.ChartJs","page":"ChartJs","title":"Patchwork.ChartJsPlugin.ChartJs","text":"ChartJs(\n    title::String,\n    chart_type::String,\n    data::Dict{String,Any};\n    options::Dict{String,Any} = Dict{String,Any}()\n)\n\nChart.js visualization plugin.\n\nCreates interactive charts using Chart.js library. Supports multiple chart types with customizable options. Always use Dict{String,Any} for type parameters to avoid type inference issues.\n\nFields\n\ntitle::String: Chart title displayed above the visualization\nchart_type::String: Type of chart (line, bar, radar, doughnut, pie, polarArea, bubble, scatter)\ndata::Dict{String,Any}: Chart data configuration (labels and datasets)\noptions::Dict{String,Any}: Optional chart configuration options\n\nExample: Bar Chart\n\nPatchwork.ChartJs(\n    \"Sales by Quarter\",\n    \"bar\",\n    Dict{String,Any}(\n        \"labels\" => [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n        \"datasets\" => [\n            Dict{String,Any}(\n                \"label\" => \"2024\",\n                \"data\" => [12, 19, 8, 15],\n                \"backgroundColor\" => \"rgba(54, 162, 235, 0.5)\",\n            ),\n        ],\n    ),\n)\n\nExample: Doughnut Chart\n\nPatchwork.ChartJs(\n    \"Traffic Sources\",\n    \"doughnut\",\n    Dict{String,Any}(\n        \"labels\" => [\"Direct\", \"Social\", \"Organic\"],\n        \"datasets\" => [\n            Dict{String,Any}(\n                \"data\" => [300, 150, 200],\n                \"backgroundColor\" => [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"],\n            ),\n        ],\n    ),\n)\n\nExample: With Custom Options\n\nPatchwork.ChartJs(\n    \"Time Series\",\n    \"line\",\n    Dict{String,Any}(...),\n    options = Dict{String,Any}(\n        \"plugins\" => Dict(\n            \"legend\" => Dict(\"position\" => \"top\"),\n        ),\n    ),\n)\n\nSee also: Highcharts, Plotly, Plugin\n\n\n\n\n\n","category":"type"},{"location":"plugins/leaflet/#Leaflet","page":"Leaflet","title":"Leaflet","text":"","category":"section"},{"location":"plugins/leaflet/#Patchwork.LeafletPlugin.Leaflet","page":"Leaflet","title":"Patchwork.LeafletPlugin.Leaflet","text":"Leaflet(\n    title::String,\n    center::Tuple{Float64,Float64};\n    zoom::Int = 13,\n    markers::Vector{Dict{String,Any}} = Dict{String,Any}[],\n    options::Dict{String,Any} = Dict{String,Any}()\n)\n\nInteractive map plugin using Leaflet.\n\nCreates interactive maps with markers and popups using the Leaflet library. Uses OpenStreetMap tiles by default. Supports custom map options and multiple markers.\n\nFields\n\ntitle::String: Map title displayed above the visualization\ncenter::Tuple{Float64,Float64}: Map center coordinates (latitude, longitude)\nzoom::Int: Initial zoom level (1-19, default: 13)\nmarkers::Vector{Dict{String,Any}}: Markers to display on the map\noptions::Dict{String,Any}: Optional Leaflet map options\n\nMarker Format\n\nEach marker should be a dictionary with:\n\n\"lat\"::Float64 - Latitude\n\"lng\"::Float64 - Longitude\n\"popup\"::String - Optional popup HTML content\n\nExample: Simple Map\n\nPatchwork.Leaflet(\n    \"New York City\",\n    (40.7128, -74.0060),\n    zoom = 12,\n)\n\nExample: Map with Markers\n\nPatchwork.Leaflet(\n    \"Major US Cities\",\n    (39.8283, -98.5795),\n    zoom = 4,\n    markers = [\n        Dict{String,Any}(\n            \"lat\" => 40.7128,\n            \"lng\" => -74.0060,\n            \"popup\" => \"<b>New York</b><br>Population: 8.3M\",\n        ),\n        Dict{String,Any}(\n            \"lat\" => 34.0522,\n            \"lng\" => -118.2437,\n            \"popup\" => \"<b>Los Angeles</b><br>Population: 4.0M\",\n        ),\n    ],\n)\n\nExample: Custom Options\n\nPatchwork.Leaflet(\n    \"Map\",\n    (51.505, -0.09),\n    zoom = 13,\n    options = Dict{String,Any}(\n        \"scrollWheelZoom\" => false,\n    ),\n)\n\nSee also: Plotly, Plugin\n\n\n\n\n\n","category":"type"},{"location":"#Patchwork.jl","page":"Home","title":"Patchwork.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Create interactive, self-contained HTML dashboards with Julia.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Self-contained HTML files - Share dashboards anywhere, no server required\nTabbed interface with search and mobile support\nBuilt-in plugins - Markdown, Chart.js, Highcharts, Plotly, Leaflet, Mermaid\nPlugin system - Integrate any JavaScript library\nZero configuration - Works out of the box","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"Patchwork\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Patchwork\n\ndashboard = Patchwork.Dashboard(\n    \"My Dashboard\",\n    [\n        Patchwork.Tab(\n            \"Overview\",\n            [\n                Patchwork.Markdown(\"\"\"\n                # Welcome to Patchwork.jl\n\n                Create beautiful dashboards with:\n                - Interactive charts\n                - Maps\n                - Diagrams\n                - Custom content\n                \"\"\"),\n            ],\n        ),\n    ],\n)\n\nsave(dashboard, \"dashboard.html\")","category":"page"}]
}
